/*! DirtyForm v0.4.0 | MIT License */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).DirtyForm=t()}(this,function(){"use strict";return class{static trackedTags=["INPUT","SELECT","TEXTAREA"];constructor(e,t={}){this.form=e,this.isDirty=!1,this.initialValues={},this.onDirty=t.onDirty,this.beforeLeave=t.beforeLeave,this.message=t.message||"You have unsaved changes!",this.debouncedValueChanged=function(e,t=100){let i;return(...n)=>{clearTimeout(i),i=setTimeout(()=>{e.apply(this,n)},t)}}(this.valueChanged),this.setupFieldsTracking(),t.skipLeavingTracking||this.setLeavingHandler()}disconnect(){this.removeFieldsTracking(),this.removeLeavingHandler()}setupFieldsTracking(){this.fields.forEach(e=>{switch(this.initialValues[e.name]=e.value,e.tagName){case"TRIX-EDITOR":e.addEventListener("trix-change",this.debouncedValueChanged);break;case"SELECT":e.addEventListener("change",this.debouncedValueChanged);break;default:e.addEventListener("change",this.debouncedValueChanged),e.addEventListener("input",this.debouncedValueChanged)}})}removeFieldsTracking(){this.fields.forEach(e=>{switch(e.tagName){case"TRIX-EDITOR":e.removeEventListener("trix-change",this.debouncedValueChanged);break;case"SELECT":e.removeEventListener("change",this.debouncedValueChanged);break;default:e.removeEventListener("change",this.debouncedValueChanged),e.removeEventListener("input",this.debouncedValueChanged)}})}setLeavingHandler(){window.addEventListener("beforeunload",this.beforeUnload),"undefined"!=typeof Turbo&&document.addEventListener("turbo:before-visit",this.onLeave)}removeLeavingHandler(){window.removeEventListener("beforeunload",this.beforeUnload),"undefined"!=typeof Turbo&&document.removeEventListener("turbo:before-visit",this.onLeave)}get fields(){let e=this.constructor.trackedTags.map(e=>`${e}[name]`).join(",");return e+=",TRIX-EDITOR",Array.from(this.form.querySelectorAll(e)).filter(e=>"false"!=e.getAttribute("data-dirty-form"))}markAsDirty(){this.isDirty||(this.isDirty=!0,this.onDirty&&this.onDirty())}valueChanged=e=>{const t=e.target;this.initialValues[t.name]!=t.value&&this.markAsDirty()};beforeUnload=e=>{this.isDirty&&(e.preventDefault(),e.returnValue=this.message)};onLeave=e=>{this.isDirty?confirm(this.message)?this.beforeLeave&&this.beforeLeave():e.preventDefault():this.isDirty=!1}}});
